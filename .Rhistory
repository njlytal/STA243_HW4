?t.test
x=sample(c(0,1), n, replace=TRUE)
set.seed=(390)
n=30
x=sample(c(0,1), n, replace=TRUE)
x
t.test(x)
?rnorm
rnorm(25, mean=0, sd=1)
sum((x-xbar)^2)
x=rnorm(25, mean=10, sd=10)
xbar=sum(x)/n
n
n=25
xbar=sum(x)/n
xbar
sum((x-xbar)^2)
@
\end{document}
sd(x)
sd(x)/n
t.test(x)
?t.test
t.test(x, mu=10)
x=rnorm(25, mean=10, sd=10)
t.test(x)
t.test(x, mu=10)
xbar=sum(x)/n
xbar
se=(1/n)*sqrt((1/(n-1))*sum((x-xbar)^2))
se
sd(x)
sd(x)/25
t=(xbar-10)/se
t
t.test(t)
t.test(x, mu=10)
xbar
t
(xbar-10)/sd(x)
(xbar-10)/(sd(x)/24)
0.399*25
se=(1/sqrt(n))*sqrt((1/(n-1))*sum((x-xbar)^2))
se
t=(xbar-10)/se
t
t.test(x)
t.test(x, mu=10)
t
?qt
qt(0.025, 24)
q=qt(0.025, 24)
pt(q, 24)
pt(t, 24)
pt(.399, 24)
dt(.399, 24)
pt(.399, 24, lower.tail=FALSE)
xbar
pt(.399, 24, lower.tail=FALSE)
pt(.399, 24)
pt(t, 24)
t
t.test()
t.test
t.test()
t.test
?t.test
t.test(x, mu=10, alternative="two.sided")
?pt
pt(t, 24)
t.test(x, mu=10, alternative="lower")
?t.test
t.test(x, mu=10, alternative="less")
pt(t, 24)
pt(t, 24)+.025
?pnorm
2*(1-pt(t, df=24))
t.test(x)
t.test(x, mu=10, alternative="less")
t.test(x, mu=10)
2*(1-pt(t, df=24))
1-0.025
qt(0.025, 24)
qt(0.975, 24)
abs(t)>q
r
t
abs(t)
q
q=qt(0.975, 24)
abs(t)
abs(t)>q
?t.test
t.test(x, mu=10)
x <- rgamma(n = 1000000, shape = 1, rate = 1)
x <- rgamma(n = 1000000, shape = 1, rate = 1)
x <- rgamma(n = 1000000, shape = 1, rate = 1)
x <- rgamma(n = 1000000, shape = 1, rate = 1)
x <- rgamma(n = 1000000, shape = 1, rate = 1)
x
g.hat <- mean(log(x))
g.hat
estimates <- matrix(ncol = length(m), nrow = 20)
m <- c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
estimates <- matrix(ncol = length(m), nrow = 20)
estimates
replicate(2, mean(log(rgamma(100, 1,1))))
i = 1
estimates[ ,i] = replicate(20,
mean(log(rgamma(m[i], 1, 1))))
estimates
sapply(m, function(i) estimates[ ,i] = replicate(20,
mean(log(rgamma(m[i], 1, 1)))))
sapply(m, function(i) estimates[ ,i] = replicate(20, mean(log(rgamma(m[i], 1, 1)))))
m <- c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
estimates <- matrix(ncol = length(m), nrow = 20)
sapply(m, function(i) estimates[ ,i] =
replicate(20, mean(log(rgamma(n = m[i], shape = 1, rate = 1)))))
m <- c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
estimates <- matrix(ncol = length(m), nrow = 20)
sapply(m, function(i) {estimates[ ,i] =
replicate(20, mean(log(rgamma(n = m[i], shape = 1, rate = 1))))})
for(i in 1:length(m)){
estimates[ ,i] = replicate(20, mean(log(rgamma(n = m[i],
shape = 1, rate = 1))))
}
estimates
m <- c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
estimates <- matrix(ncol = length(m), nrow = 20)
estimates
for(i in 1:length(m)){
estimates[ ,i] = replicate(20, mean(log(rgamma(n = m[i],
shape = 1, rate = 1))))
}
View(estimates)
estimates
colnames(estimates) <- m
colnames
estiamtes
estimates
colnames(estimates) <- rep(("m = 10"),7)
estimates
colnames(estimates) <- c("m = 10", "m = 100", "m = 1000", "m = 10000",
"m = 100000", "m = 1000000", "m = 10000000")
estimates
m <- c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
estimates <- matrix(row = length(m), ncol = 20)
for(i in 1:length(m)){
estimates[i, ] = replicate(20, mean(log(rgamma(n = m[i],
shape = 1, rate = 1))))
}
rownames(estimates) <- c("m = 10", "m = 100", "m = 1000", "m = 10000",
"m = 100000", "m = 1000000", "m = 10000000")
m <- c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
estimates <- matrix(nrow = length(m), ncol = 20)
for(i in 1:length(m)){
estimates[i, ] = replicate(20, mean(log(rgamma(n = m[i],
shape = 1, rate = 1))))
}
rownames(estimates) <- c("m = 10", "m = 100", "m = 1000", "m = 10000",
"m = 100000", "m = 1000000", "m = 10000000")
View(estimates)
estimates
all.means <- rowmeans(estimates)
all.means <- row.means(estimates)
all.means <- rowMeans(estimates)
all.means
all.sds <- sapply(nrow(estimates), function(i)
sd(estimates[i,]))
all.sds
all.sds <- sapply(1:nrow(estimates), function(i)
sd(estimates[i,]))
all.sds
sd(estimates[1,])
sd(estimates[4,])
names(all.sds) <- names(all.means)
all.sds
plot(log10(m), all.sds,
main = "Log_10 MC Sample Size vs.Standard Deviations",
ylab = "Standard Deviations", xlab = "Log_10 Sample Size")
type = "b")
plot(log10(m), all.sds,
main = "Log_10 MC Sample Size vs.Standard Deviations",
ylab = "Standard Deviations", xlab = "Log_10 Sample Size",
type = "b")
load("~/Desktop/astro.txt")
load("~/Desktop/astro.txt")
load("~/Desktop/astro.txt")
astro <- read.table("~/Desktop/astro.txt", quote="\"")
View(astro)
counts <- astro
counts
names(astro) <- "counts"
astro
beta <- 3.2/1.21
beta
alpha <- 3.2*beta
alpha
n <- 20
alpha.star <- alpha + n*3.65
alpha.star
beta.star <- beta + n
beta.star
sample <- rgamma(10000, shape = alpha.star, rate = beta.star)
confint(sample)
predict(sample)
central <- c(qgamma(0.025, alpha.star, beta.star),
qgamma(0.975, alpha.star, beta.star))
central
central <- c(quantile(0.025, sample),
quantile(0.975, sample))
central <- c(quantile(sample, 0.025),
quantile(sample, 0.975))
central
set.seed(123)
central <- c(quantile(sample, 0.025),
quantile(sample, 0.975))
central
set.seed(123)
sample <- rgamma(10000, shape = alpha.star, rate = beta.star)
central <- c(quantile(sample, 0.025),
quantile(sample, 0.975))
central
# Angela Andrews 994927626 Homework 1
# University of California Davis. STA 145 Fall 2014 P. Baines
# This program calculates posterior central and highest posterior confidence
# intervals using both an informative prior, Jeffrey's prior, and no prior.
library(nlme)
# Function Definitions
HPD <- function(level, alpha, beta, increment, epsilon){
# Calcualtes the highest posterior density confidence interval for a gamma
# distribution
#
# Args:
#   level: level of confidence; area of density contained in the interval
#   alpha: alpha of the gamma distribution
#   beta: beta of the gamma distribution
#   increment: amount to decrease intervals ends by
#   epsilon: level to compare difference to
theta.low <- qgamma(0.025, alpha, beta)
theta.high <- qgamma(0.975, alpha, beta)
find.theta <- FALSE
while(!find.theta){
find.theta <- abs(dgamma(theta.high, alpha, beta) -
dgamma(theta.low, alpha, beta)) < epsilon
theta.low <- theta.low - increment
theta.high <- theta.high - increment
}
c(theta.low, theta.high)
}
# Problem 2
# Part a
beta <- 3.2/1.21
beta
alpha <- 3.2*beta
alpha
sample <- rgamma(1000000, alpha, beta)
# Part b
plot(density(sample), main="Prior Distribution")
# Part c
n <- 20
alpha.star <- alpha + n*3.65
alpha.star
beta.star <- beta + n
beta.star
post.mean <- alpha.star/beta.star
post.mean
# Central confidence interval
# Highest Posterior Density
post.sample <- rgamma(100000, alpha.star, beta.star )
post.sample.density <- density(post.sample)
post.sample.density.x <- post.sample.density$x
post.sample.density.y <- post.sample.density$y
post.max.density <- post.sample.density.x[which.max(post.sample.density.y)]
central <- c(qgamma(0.025, alpha.star, beta.star),
qgamma(0.975, alpha.star, beta.star))
central
new.samples <- sapply(1:10000, function(i) rpois(20, sample[i]))
class(new.samples)
dim(new.samples)
new.samples[,1:2]
hist(astro)
class(astro)
hist(astro$counts)
hist(astro$counts, xlab = "counts")
plot.which.samples <- sample(1:10000, 8)
plot.which.samples
sapply(plot.which.samples, function(i) hist(plot.which.samples[i], xlab = "counts"))
sapply(plot.which.samples, function(i) hist(new.samples[,plot.which.samples[i]], xlab = "counts"))
par(mfrow = c(3, 3))
hist(astro$counts, xlab = "counts")
for(i in 1:8){
hist(new.samples[,plot.which.samples[i]], xlab = "counts")
}
par(mfrow = c(3, 3))
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
for(i in 1:8){
hist(new.samples[,plot.which.samples[i]], xlab = "counts")
}
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
hist(astro$counts, xlab = "counts")
par(mfrow = c(3, 3))
hist(astro$counts, xlab = "counts")
par(mfrow = c(3, 3))
hist(astro$counts, xlab = "counts")
for(i in 1:8){
hist(new.samples[,plot.which.samples[i]], xlab = "counts")
}
par(mfrow = c(3, 3))
hist(astro$counts, xlab = "counts")
for(i in 1:8){
hist(new.samples[,plot.which.samples[i]], xlab = "counts")
}
par(mfrow = c(3, 3))
hist(astro$counts, xlab = "counts")
for(i in 1:8){
hist(new.samples[,plot.which.samples[i]], xlab = "counts")
}
